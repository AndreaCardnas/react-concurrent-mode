{"version":3,"sources":["resource/promiseWrapper.js","resource/fetchers.js","resource/index.js","App.js","serviceWorker.js","index.js"],"names":["promiseWrapper","promise","result","status","suspender","then","response","catch","error","read","BASE_URL","fetcher","path","options","fetch","headers","json","fetchUser","userId","console","trace","fetchPost","userPromise","endpoints","postPromise","user","posts","ProfileDetails","React","lazy","Posts","initialResource","fetchResource","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","createRoot","render","useState","resource","setResource","useTransition","timeoutMs","startTransition","isPending","sm","size","order","offset","revealOrder","tail","fallback","block","disabled","onClick","id","nextUserId","Math","max","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yMAAe,SAASA,EAAeC,GAErC,IAGIC,EAHAC,EAAS,UAMTC,EAAYH,EACbI,MAAK,SAACC,GACLH,EAAS,UACTD,EAASI,KAEVC,OAAM,SAACC,GACNL,EAAS,QACTD,EAASM,KAGb,MAAO,CACLC,KADK,WAEH,GAAe,YAAXN,EACF,MAAMC,EACD,GAAe,UAAXD,EACT,MAAMD,EACD,GAAe,YAAXC,EACT,OAAOD,I,qlBCzBf,IAAMQ,EAAW,uCAEjB,SAASC,EAAQC,GAAqB,IAAfC,EAAc,uDAAJ,GAC/B,OAAOC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,GAAf,KACPC,EADO,CAEVE,QAAQ,EAAD,GAAQF,EAAQE,SAAW,OACjCV,MAAK,SAACC,GAAD,OAAcA,EAASU,UAG1B,SAASC,EAAUC,GACxB,OAAOP,EAAQ,UAAD,OAAWO,IAAUX,OAAM,SAACC,GAAD,OAAWW,QAAQC,MAAMZ,MAG7D,SAASa,EAAUH,GACxB,OAAOP,EAAQ,iBAAD,OAAkBO,IAAUX,OAAM,SAACC,GAAD,OAAWW,QAAQC,MAAMZ,MCX5D,iBAAiB,IAAhBU,EAAe,uDAAN,EACjBI,EAAcC,EAAoBL,GAClCM,EAAcD,EAAoBL,GAExC,MAAO,CACLO,KAAMzB,EAAesB,GACrBI,MAAO1B,EAAewB,KCJpBG,EAAiBC,IAAMC,MAAK,kBAAM,iCAClCC,EAAQF,IAAMC,MAAK,kBAAM,iCAGzBE,EAAkBC,ICGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,WAAWJ,GAAaK,OAAO,mBFCzB,WAAgB,IAAD,EACIC,mBAASb,GADb,mBACrBc,EADqB,KACXC,EADW,OAESC,wBAAc,CAAEC,UAAW,OAFpC,mBAErBC,EAFqB,KAEJC,EAFI,KAY5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,MAAO,EAAGC,OAAQ,IACrC,kBAAC,eAAD,CAAcC,YAAY,WAAWC,KAAK,aACxC,kBAAC,WAAD,CAAUC,SAAU,0DAClB,kBAAC9B,EAAD,CAAgBkB,SAAUA,KAE5B,kBAAC,WAAD,CAAUY,SAAU,kDAClB,kBAAC3B,EAAD,CAAOe,SAAUA,KAEnB,6BACA,kBAAC,IAAD,CAAQa,OAAK,EAACC,SAAUT,EAAWU,QApBlB,WACzBX,GAAgB,WAAO,IACbY,EAAOhB,EAASpB,KAAKhB,OAArBoD,GACFC,EAAaC,KAAKC,IAAI,GAAIH,EAAK,GAAK,IAC1Cf,EAAYd,EAAc8B,SAiBhBZ,EAAa,wBAA4B,sBE1BjB,ODuHlC,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAM9D,MAAK,SAAA+D,GACjCA,EAAaC,iB","file":"static/js/main.2d9edd39.chunk.js","sourcesContent":["export default function promiseWrapper(promise) {\n  // set initial status\n  let status = 'pending';\n\n  // store result\n  let result;\n\n  // wait for promise\n  let suspender = promise\n    .then((response) => {\n      status = 'success';\n      result = response;\n    })\n    .catch((error) => {\n      status = 'error';\n      result = error;\n    });\n\n  return {\n    read() {\n      if (status === 'pending') {\n        throw suspender;\n      } else if (status === 'error') {\n        throw result;\n      } else if (status === 'success') {\n        return result;\n      }\n    },\n  };\n}\n","const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nfunction fetcher(path, options = {}) {\n  return fetch(`${BASE_URL}${path}`, {\n    ...options,\n    headers: { ...(options.headers || {}) },\n  }).then((response) => response.json());\n}\n\nexport function fetchUser(userId) {\n  return fetcher(`/users/${userId}`).catch((error) => console.trace(error));\n}\n\nexport function fetchPost(userId) {\n  return fetcher(`/posts?userId=${userId}`).catch((error) => console.trace(error));\n}\n","import promiseWrapper from './promiseWrapper';\nimport * as endpoints from './fetchers';\n\nexport default (userId = 1) => {\n  const userPromise = endpoints.fetchUser(userId);\n  const postPromise = endpoints.fetchPost(userId);\n\n  return {\n    user: promiseWrapper(userPromise),\n    posts: promiseWrapper(postPromise),\n  };\n};\n","import React, { SuspenseList, Suspense, useState, useTransition } from 'react';\nimport { Container, Row, Col, Button } from 'shards-react';\nimport fetchResource from './resource';\n\n// async components\nconst ProfileDetails = React.lazy(() => import('./components/ProfileDetails'));\nconst Posts = React.lazy(() => import('./components/Posts'));\n\n// resource to fetching data\nconst initialResource = fetchResource();\n\nexport default function App() {\n  const [resource, setResource] = useState(initialResource);\n  const [startTransition, isPending] = useTransition({ timeoutMs: 1500 });\n\n  const handleRefreshClick = () => {\n    startTransition(() => {\n      const { id } = resource.user.read();\n      const nextUserId = Math.max(1, (id + 1) % 11);\n      setResource(fetchResource(nextUserId));\n    });\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col sm={{ size: 10, order: 1, offset: 1 }}>\n          <SuspenseList revealOrder=\"forwards\" tail=\"collapsed\">\n            <Suspense fallback={<span>Loading user profile...</span>}>\n              <ProfileDetails resource={resource} />\n            </Suspense>\n            <Suspense fallback={<span>Loading post...</span>}>\n              <Posts resource={resource} />\n            </Suspense>\n            <br />\n            <Button block disabled={isPending} onClick={handleRefreshClick}>\n              {(isPending && 'Fetching next profile') || 'Next profile'}\n            </Button>\n          </SuspenseList>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// concurrent mode enabled\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(<App />);\nserviceWorker.unregister();\n"],"sourceRoot":""}