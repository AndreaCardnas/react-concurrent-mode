{"version":3,"sources":["components/Loader/index.js","fetcher.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","promiseWrapper","promise","result","status","suspender","then","response","catch","error","read","resource","userPromise","console","log","fetch","json","trace","postPromise","user","posts","fetchData","ProfileDetails","React","lazy","Posts","App","fallback","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAYeA,G,UATA,WACb,OACE,yBAAKC,UAAU,cACb,8BACA,iCCSAC,EAAiB,SAACC,GAEtB,IAGIC,EAHAC,EAAS,UAMTC,EAAYH,EACbI,MAAK,SAACC,GACLH,EAAS,UACTD,EAASI,KAEVC,OAAM,SAACC,GACNL,EAAS,QACTD,EAASM,KAGb,MAAO,CACLC,KADK,WAEH,GAAe,YAAXN,EACF,MAAMC,EACD,GAAe,UAAXD,EACT,MAAMD,EACD,GAAe,YAAXC,EACT,OAAOD,KCpCTQ,ED0CS,WACb,IAAMC,GA/CNC,QAAQC,IAAI,iBAELC,MAAM,gDACVT,MAAK,SAACC,GAAD,OAAcA,EAASS,UAC5BR,OAAM,SAACC,GAAD,OAAWI,QAAQI,MAAMR,OA4C5BS,GAxCNL,QAAQC,IAAI,kBAELC,MAAM,wDACVT,MAAK,SAACC,GAAD,OAAcA,EAASS,UAC5BR,OAAM,SAACC,GAAD,OAAWI,QAAQI,MAAMR,OAsClC,MAAO,CACLU,KAAMlB,EAAeW,GACrBQ,MAAOnB,EAAeiB,IChDTG,GAGXC,EAAiBC,IAAMC,MAAK,kBAAM,gCAClCC,EAAQF,IAAMC,MAAK,kBAAM,gCAahBE,EAXH,kBACV,yBAAK1B,UAAU,kBACb,kBAAC,WAAD,CAAU2B,SAAU,kBAAC,EAAD,OAClB,kBAACL,EAAD,CAAgBX,SAAUA,KAE5B,kBAAC,WAAD,CAAUgB,SAAU,kBAAC,EAAD,OAClB,kBAACF,EAAD,CAAOd,SAAUA,OCLHiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,WAAWC,SAASC,eAAe,SAASC,OAAO,kBAAC,EAAD,OD0HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.bb8f5a73.chunk.js","sourcesContent":["import React from 'react';\nimport './loader.css';\n\nconst Loader = () => {\n  return (\n    <div className=\"lds-ripple\">\n      <div />\n      <div />\n    </div>\n  );\n};\n\nexport default Loader;\n","const fetchUser = () => {\n  console.log('fetching user');\n\n  return fetch('https://jsonplaceholder.typicode.com/users/1')\n    .then((response) => response.json())\n    .catch((error) => console.trace(error));\n};\n\nconst fetchPost = () => {\n  console.log('fetching posts');\n\n  return fetch('https://jsonplaceholder.typicode.com/posts?_limit=10')\n    .then((response) => response.json())\n    .catch((error) => console.trace(error));\n};\n\nconst promiseWrapper = (promise) => {\n  // set initial status\n  let status = 'pending';\n\n  // store result\n  let result;\n\n  // wait for promise\n  let suspender = promise\n    .then((response) => {\n      status = 'success';\n      result = response;\n    })\n    .catch((error) => {\n      status = 'error';\n      result = error;\n    });\n\n  return {\n    read() {\n      if (status === 'pending') {\n        throw suspender;\n      } else if (status === 'error') {\n        throw result;\n      } else if (status === 'success') {\n        return result;\n      }\n    },\n  };\n};\n\nexport default () => {\n  const userPromise = fetchUser();\n  const postPromise = fetchPost();\n\n  return {\n    user: promiseWrapper(userPromise),\n    posts: promiseWrapper(postPromise),\n  };\n};\n","import React, { Suspense } from 'react';\nimport Loader from './components/Loader';\n\n// resource to fetching data\nimport fetchData from './fetcher';\nconst resource = fetchData();\n\n// async components\nconst ProfileDetails = React.lazy(() => import('./components/ProfileDetails'));\nconst Posts = React.lazy(() => import('./components/Posts'));\n\nconst App = () => (\n  <div className=\"container my-5\">\n    <Suspense fallback={<Loader />}>\n      <ProfileDetails resource={resource} />\n    </Suspense>\n    <Suspense fallback={<Loader />}>\n      <Posts resource={resource} />\n    </Suspense>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Enable concurrent mode\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}